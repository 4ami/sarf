import jwt
from datetime import (datetime, timezone, timedelta)
from .key_helper import KeyHelper


class TokenHelper:
    @staticmethod
    def user_pair_tokens(payload:dict)->tuple[str,str]:
        payload['iss']='SARF'
        payload['exp']= datetime.now(timezone.utc)+timedelta(hours=1, minutes=30)
        
        token:str=jwt.encode(
            payload=payload, 
            key=KeyHelper.get_private(), 
            algorithm='RS256'
        )
        
        payload['exp']= datetime.now(timezone.utc)+timedelta(days=15)

        ref:str=jwt.encode(
            payload=payload, 
            key=KeyHelper.get_private(), 
            algorithm='RS256'
        )
        return (token, ref)
    

    @staticmethod
    def verify(token:str)->tuple[dict|None, bool]:
        try:
            decoded:dict=jwt.decode(
                token,
                key=KeyHelper.get_public(),
                algorithms=['RS256']
            )
            
            isexpired:bool= datetime.now(timezone.utc).timestamp() > decoded['exp']
            if isexpired: raise jwt.DecodeError('Expired')

            correct:bool= 'SARF' == decoded['iss']
            if not correct: raise jwt.DecodeError('Not generated by us')

            return decoded, (not isexpired and correct)
        except jwt.DecodeError as d:
            return None, False
        except jwt.ExpiredSignatureError as s:
            return None, False

    @staticmethod
    def token(refToken:str) -> str | None:
        payload, is_valid= TokenHelper.verify(token=refToken)

        if not is_valid: return None

        payload['iss']='SARF'
        payload['exp']= datetime.now(timezone.utc)+timedelta(hours=1, minutes=30)
        
        token:str=jwt.encode(
            payload=payload, 
            key=KeyHelper.get_private(), 
            algorithm='RS256'
        )
        return token